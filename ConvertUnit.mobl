application ConvertUnit

import mobl::ui::generic

// top page
screen root() 
{
	var unitStr = ""
	
	header("Unit Converter")
	{
		button("Help", onclick={ help(); })
	}
	
	group
	{
		// this is where the user enters the units to be converted
		item { textField(unitStr  , label="Enter Value Unit (ex 34cm)") }
		
		// this displays the converted units (if supported)
		list( unitC in SearchUnits(unitStr) )
		{
			item { label( unitC )}
		}
	}
}

// button on header for more info about the app
screen help()
{
	header("Help")
	{
		backButton()
	}
	
	group()
	{
		item(onclick={ instructions(); }) 
		{
  			label("Instructions")
		}
		
		item(onclick={ about(); }) 
		{
  			label("About...")
		}
	}
}

// instructions page
screen instructions()
{
	header("Instructions")
	{
		backButton()
	}
	
	group()
	{
		"ConvertUnit is a simple unit conversion program written in mobl. "
		"To do a conversion, simply type in the value and units. For example, "
		"to convert 34 centimeters, type in 34cm. The various common conversions "
		"will be displayed. Several variants are acceptable for the units "
		"(ex, 34cm, 34 cm, 34 centimeter). Note that mobl is fantastic in that "
		"you don’t need to press go, it works as you type."
		"<br><br>"
		"This software is designed to give common conversions with minimal inputs "
		"by the user. Type and the conversions appear. It does lack generality, but "
		"who needs to know how many inches are in a light year?"
		"<br><br>"
		"The source is located on github"
		"<br><br>"
	    link("https://TreyArthur@github.com/TreyArthur/ConvertUnit.git")
	}
}

// about page
screen about()
{
	header("About")
	{
		backButton()
	}
	
	group()
	{
		"ConvertUnit - simple unit converter <br>"
	    "Copyright (C) 2011 <br>"
	    "Trey Arthur: treyarthur3 -at- gmail +dot+ com"
		"<br><br>"
	    "This program is free software: you can redistribute it and/or modify "
	    "it under the terms of the GNU General Public License as published by "
	    "the Free Software Foundation, either version 3 of the License, or "
	    "any later version."
		"<br><br>"
	    "This program is distributed in the hope that it will be useful, "
	    "but WITHOUT ANY WARRANTY; without even the implied warranty of "
	    "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the "
	    "GNU General Public License for more details."
		"<br><br>"
	    link("http://www.gnu.org/licenses/")
	}
}

////////////////////////////////////////////////////////////////////////////////
//
//  UnitsScrapper - function to extract units from input.  For example, if the
//    input string is '34cm', this function will return the string 'cm'
//
function UnitsScrapper( data : String ) : String
{
  var inData = data.toLowerCase();
  var units = "";
  
  var i=0;
  var foundUnits  = false;
  while ( !foundUnits && (i<inData.length) )
  {
  	var c = inData.charAt(i);
  	
  	if ( Math.isNaN(parseNum( c )) )
    {
      if ( c != " " && c != "." && c != "-" )
        foundUnits = true;
    }
  	
  	i=i+1;
  }
  
  units = inData.substring( i-1 , inData.length );
  
  return units;
}

////////////////////////////////////////////////////////////////////////////////
//
// SetDecimalPlaces - This function will round the decimal places to the number 
//  of places specified.
//
function SetDecimalPlaces(value : Num , places : Num) : Num
{
  var factor : Num = Math.pow(10.0,places);

  var decimalValue : Num = Math.round( factor * value ) / factor;

  return decimalValue;
}

////////////////////////////////////////////////////////////////////////////////
//
//  Convert - this function inputs the value to be converted, the conversion 
//    factor and the units of the newly converted value.  It sets the number of
//    decimal places to 4.
//
function Convert(value : Num , factor : Num , units : String) : String
{
  var output  = SetDecimalPlaces( value*factor, 4 ).toString() + " " + units;

  return output;  
}

////////////////////////////////////////////////////////////////////////////////
//
//  SearchUnits - this functions searches through the known units database for
//    a match of units.  Once the unit conversion is identified (ie, a 'match')
//    the unit conversion is done.
//
function SearchUnits(data : String) : Array<String>
{
	// separte the number from the units string
	var value = parseNum( data );
    var units = UnitsScrapper( data );

	// This is the database of unit conversion factors
	//  A database entry is separated into 2 parts by the equal (=) sign
	//   To the left of the equal, the unit to be converted
	//     - the left entry contains all of the equivalent values, separated by a colon for a 
	//       unit (ex, ft is the same as foot and feet)
	//   To the right of the equal, the list of conversion factors and associated unit
	//     - the factor and units are separated by a comma.
	var unitsDb = [
		"cm:centimeter=3.2808e-2,feet:3.9370e-1,inches:1.0e-5,kilometers:1.0e-2,meters:1.0936e-2,yards",
		"ft:feet:foot:'=3.0480e+1,centimeters:12.0,inches:3.0480e-4,kilometers:3.0480e-1,meters:1.8939e-4,miles:1.6458e-4,nautical miles:3.3333e-1,yards",
		"in:inch:\"=2.5400,centimeters:8.3333e-2,feet:2.5400e-2,meters:2.7778e-2,yards",
		"km:kilometer=3.2808e+3,feet:3.9370e+4,inches:1.0e+3,meters:6.2137e-1,miles:5.3996e-1,nautical miles:1.0936e+3,yards",
		"m:meter=1.0000e+2,centimeters:3.2808,feet:3.9370e+1,inches:1.0e-3,kilometers:6.2137e-4,miles:5.3996e-4,nautical miles:1.0936,yards",
		"mi:mile=5.2800e+3,feet:6.3360e+4,inches:1.6093,kilometers:1.6093e+3,meters:3.2000e+2,rods:1.7600e+3,yards",
		"nmi:nautical mile=6.0761e+3,feet:1.8520e+3,meters",
		"yd:yard=9.1440e+1,centimeters:3.0000,feet:3.6000e+1,inches:9.1440e-4,kilometers:9.1440e-1,meters:5.6818e-4,miles:1.8182e-1,rods",
		"feet/s:fps:ft/s:foot/s=30.480,cm/second:1.0973,km/hour:0.59248,knots:0.30480,meters/second:0.68182,miles/hour",
		"kt:knot=1.6890,feet/second:1.1516,miles/hour:1.8532,km/hour:0.51480,meters/second",
		"mph:mile/hour:mi/hr=1.4667,feet/second:1.6093,km/hour:8.6898e-1,knots:4.4704e-1,meters/second",
		"g:gram=1.0000e-3,kilograms:3.5274e-2,ounces:.2046e-3,pounds:9.8067e+2,dynes:9.8067e-3,newtons",
		"pound:lb:lbs:#=4.5359e+2,grams:4.5359e-1,kilograms:1.6000e+1,ounces",
		"kgm2:kg-m2:kgm^2:kg-m^2=0.738,slug-ft2:106.0,slug-in2:23.7,lb(m)-ft2:3.42e3,lb(m)-in2",
		"slugft2:slug-ft2=1.36,kg-m2:144.0,slug-in2",
		"n:newton=0.22481,lbf",
		"lbf=4.44822,Newtons"
	];
    
	var output = Array<String>();
	
	// march through all the database entries
	var i=0;
	while ( i<unitsDb.length )
	{
		var match = false;
		
		var unitStr = unitsDb[i].split("=");	// split the current entry 
		var allUnits = unitStr[0].split(":");	// split the left entry to the equivalent units
		
		// check of the units scrapped off equal any of the units in the database
		var j=0;
		while( j<allUnits.length )
		{
			if( units == allUnits.get(j) ) match = true;
			j=j+1;
		}
		
		// the user entered units match units in the database
		if ( match )
		{
			var conversion = unitStr[1].split(":");	// split the conversion factor-units string
			
			// march through each of the factor-unit pairs and find the conversions
			var k=0;
			while( k<conversion.length )
			{
				var temp = conversion.get(k).split(",");	// factor and units separated by a comma
				var factor = parseNum( temp[0] );
				
				output.push( Convert(value , factor , temp[1]) );	// push each conversion to the string array
				
				k=k+1;
			}
		}
		
		i=i+1;
	}
	
	return output;
}


